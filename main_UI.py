# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PyQt_UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import time

import torchvision
from PyQt5.QtCore import QThread, pyqtSignal

import models

import torch
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QFileDialog

import cv2 as cv
from PIL import Image
import numpy as np

def pil_loader(path):
    with open(path, 'rb') as f:
        img = Image.open(f)
        return img.convert('RGB')

def HSV_loader(path):
    img_HSV = cv.imread(path)
    img_HSV = cv.cvtColor(img_HSV, cv.COLOR_BGR2HSV)

    H, S, V  = cv.split(img_HSV)
    imgZeros = np.zeros_like(img_HSV)
    imgZeros[:,:,0] = 240
    imgZeros[:,:,1]=S
    imgZeros[:,:,2]=V
    img = cv.cvtColor(imgZeros, cv.COLOR_HSV2RGB)

    img_HSV = Image.fromarray(img)

    return img_HSV

# class Worker(QThread):
#     finishSignal = pyqtSignal(str)
#     def __init__(self):
#         super(Worker, self).__init__()
#
#     def run(self):
#         if ui.model_init_bool and ui.openfile_model_name and ui.img_name:
#             self.finishSignal.emit("现在可以开始预测了！")

class main_window(QtWidgets.QMainWindow):
    def __init__(self):
        super(main_window, self).__init__()
        self.setupUi(self)
        self.setWindowIcon(QIcon("./selfdata/T_05.jpg"))
        self.init_slots()
        self.openfile_model_name = None

        self.device = torch.device('cuda:0' if torch.cuda.is_available() else "cpu")
        self.device_view.setText("The project is running on {}!".format(self.device))
        self.model_init_bool = False
        self.img_name =None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1141, 947)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(50, 240, 1001, 271))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label1 = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.label1.sizePolicy().hasHeightForWidth())
        self.label1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label1.setFont(font)
        self.label1.setText("")
        self.label1.setObjectName("label1")
        self.gridLayout.addWidget(self.label1, 0, 1, 1, 2)
        self.label2 = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.label2.sizePolicy().hasHeightForWidth())
        self.label2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label2.setFont(font)
        self.label2.setText("")
        self.label2.setObjectName("label2")
        self.gridLayout.addWidget(self.label2, 1, 1, 1, 2)
        self.predicting_view_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.predicting_view_2.sizePolicy().hasHeightForWidth())
        self.predicting_view_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.predicting_view_2.setFont(font)
        self.predicting_view_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.predicting_view_2.setText("")
        self.predicting_view_2.setObjectName("predicting_view_2")
        self.gridLayout.addWidget(self.predicting_view_2, 3, 1, 1, 2)
        self.predicting_view = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.predicting_view.sizePolicy().hasHeightForWidth())
        self.predicting_view.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.predicting_view.setFont(font)
        self.predicting_view.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.predicting_view.setText("")
        self.predicting_view.setObjectName("predicting_view")
        self.gridLayout.addWidget(self.predicting_view, 2, 1, 1, 2)
        self.runtime_view = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.runtime_view.sizePolicy().hasHeightForWidth())
        self.runtime_view.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.runtime_view.setFont(font)
        self.runtime_view.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.runtime_view.setText("")
        self.runtime_view.setObjectName("runtime_view")
        self.gridLayout.addWidget(self.runtime_view, 4, 1, 1, 2)
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(50, 120, 1001, 111))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Button_model_select = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_model_select.sizePolicy().hasHeightForWidth())
        self.Button_model_select.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_model_select.setFont(font)
        self.Button_model_select.setObjectName("Button_model_select")
        self.horizontalLayout.addWidget(self.Button_model_select)
        self.Button_model_init = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_model_init.sizePolicy().hasHeightForWidth())
        self.Button_model_init.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_model_init.setFont(font)
        self.Button_model_init.setObjectName("Button_model_init")
        self.horizontalLayout.addWidget(self.Button_model_init)
        self.Button_open_image = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_open_image.sizePolicy().hasHeightForWidth())
        self.Button_open_image.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_open_image.setFont(font)
        self.Button_open_image.setObjectName("Button_open_image")
        self.horizontalLayout.addWidget(self.Button_open_image)
        self.Button_predict = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_predict.sizePolicy().hasHeightForWidth())
        self.Button_predict.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_predict.setFont(font)
        self.Button_predict.setObjectName("Button_predict")
        self.horizontalLayout.addWidget(self.Button_predict)
        self.Button_exit = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_exit.sizePolicy().hasHeightForWidth())
        self.Button_exit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Button_exit.setFont(font)
        self.Button_exit.setObjectName("Button_exit")
        self.horizontalLayout.addWidget(self.Button_exit)
        self.device_view = QtWidgets.QLabel(self.centralwidget)
        self.device_view.setGeometry(QtCore.QRect(350, 10, 591, 97))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.device_view.setFont(font)
        self.device_view.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.device_view.setText("")
        self.device_view.setObjectName("device_view")
        self.image_view = QtWidgets.QLabel(self.centralwidget)
        self.image_view.setGeometry(QtCore.QRect(50, 550, 361, 361))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.image_view.sizePolicy().hasHeightForWidth())
        self.image_view.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.image_view.setFont(font)
        self.image_view.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.image_view.setText("")
        self.image_view.setObjectName("image_view")
        self.pre_Score = QtWidgets.QLabel(self.centralwidget)
        self.pre_Score.setGeometry(QtCore.QRect(500, 550, 551, 361))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pre_Score.sizePolicy().hasHeightForWidth())
        self.pre_Score.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pre_Score.setFont(font)
        self.pre_Score.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pre_Score.setText("")
        self.pre_Score.setTextFormat(QtCore.Qt.PlainText)
        self.pre_Score.setAlignment(QtCore.Qt.AlignCenter)
        self.pre_Score.setObjectName("pre_Score")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 520, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(500, 520, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Button_model_select.setText(_translate("MainWindow", "选择模型"))
        self.Button_model_init.setText(_translate("MainWindow", "模型初始化"))
        self.Button_open_image.setText(_translate("MainWindow", "打开图像"))
        self.Button_predict.setText(_translate("MainWindow", "开始预测"))
        self.Button_exit.setText(_translate("MainWindow", "结束"))
        self.label.setText(_translate("MainWindow", "预测图像展示："))
        self.label_2.setText(_translate("MainWindow", "预测结果："))

    # 绑定信号与槽
    def init_slots(self):
        self.Button_model_select.clicked.connect(self.model_select)
        self.Button_model_init.clicked.connect(self.model_init)
        self.Button_open_image.clicked.connect(self.open_image)
        self.Button_predict.clicked.connect(self.predict)
        self.Button_exit.clicked.connect(self.exit)


    # 选择模型文件，这里仅仅可以使用.pkl和.pt文件
    def model_select(self):
        self.openfile_model_name,_=QFileDialog.getOpenFileNames(self.Button_model_select,"选择模型文件",
                                                           "./pretrained/","*.pkl;;*.pt")
        if not self.openfile_model_name:
            self.predicting_view.setText("")
            self.label1.setText("")
            QtWidgets.QMessageBox.warning(self,u"warning",u"模型权重文件选择失败，请重新选择",
                                          buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:
            self.label1.setText("所选模型文件地址为：\n"+str(self.openfile_model_name))

            self.predicting_view_2.setText("")
            self.runtime_view.setText("")
            self.pre_Score.setText("")
            if ui.model_init_bool and ui.openfile_model_name and ui.img_name:
                self.predicting_view.setText("现在可以开始预测了！")



    def model_init(self):
        if self.openfile_model_name:
            weight = self.openfile_model_name

            self.model_NQS = models.SelfAdapt_Net(16, 112, 224, 112, 56, 28, 14, 7).to(device=self.device)
            self.model_NQS.train(False)
            self.model_NQS.load_state_dict(torch.load(weight[0],map_location=self.device))

            print("model initial done")
            QtWidgets.QMessageBox.information(self, "提示", "模型初始化成功")
            self.model_init_bool = True
            if ui.model_init_bool and ui.openfile_model_name and ui.img_name:
                self.predicting_view.setText("现在可以开始预测了！")

        else:
            QtWidgets.QMessageBox.warning(self,"Warning","模型权重文件未选择",
                                          buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)

    def open_image(self):

        self.img_name, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, "打开图片", "./selfdata", "*.jpg;;*.png;;All Files(*)")

        if not self.img_name:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"打开图片失败", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
            self.predicting_view.setText("")
            self.label2.setText("")
        else:
            self.label2.setText("图片路径：\n" + self.img_name)
            pixmap = QPixmap(self.img_name)
            self.image_view.setPixmap(pixmap.scaled(self.image_view.size(),aspectRatioMode=QtCore.Qt.KeepAspectRatio))

            self.predicting_view_2.setText("")
            self.runtime_view.setText("")
            self.pre_Score.setText("")
            if self.model_init_bool and self.openfile_model_name and self.img_name:
                self.predicting_view.setText("现在可以开始预测了！")

    def predict(self):
        if not self.img_name:
            if not self.openfile_model_name:
                QtWidgets.QMessageBox.warning(self, u"Warning", u"图片和模型均未选择", buttons=QtWidgets.QMessageBox.Ok,
                                              defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                QtWidgets.QMessageBox.warning(self, u"Warning", u"图片未选择", buttons=QtWidgets.QMessageBox.Ok,
                                              defaultButton=QtWidgets.QMessageBox.Ok)
        elif not self.openfile_model_name:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"模型未选择", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        elif not self.model_init_bool:
            QtWidgets.QMessageBox.warning(self, u"Warning", u"模型未初始化", buttons=QtWidgets.QMessageBox.Ok,
                                          defaultButton=QtWidgets.QMessageBox.Ok)
        else:


            start_time = time.time()
            transforms = torchvision.transforms.Compose([
                torchvision.transforms.Resize((512, 384)),
                torchvision.transforms.RandomCrop(size=224),
                torchvision.transforms.ToTensor(),
                torchvision.transforms.Normalize(mean=(0.485, 0.456, 0.406),
                                                 std=(0.229, 0.224, 0.225))])

            # 随机裁剪3个斑块，计算平均质量分数
            pred_scores = []
            for i in range(3):
                RGB_img = pil_loader(self.img_name)
                HSV_img = HSV_loader(self.img_name)
                img = Image.blend(RGB_img, HSV_img, 0.2)

                img = transforms(img)
                img = torch.as_tensor(img.to(device=self.device)).unsqueeze(0)
                # paras'包含传达给目标网络的网络权重
                paras = self.model_NQS(img)
                # 建立目标网络
                model_target = models.TargetNet(paras).to(device=self.device)
                for param in model_target.parameters():
                    param.requires_grad = False

                # 质量预测
                # paras['target_in_vec']是对目标网的输入
                pred = model_target(paras['target_in_vec'])
                pred_scores.append(float(pred.item()))
            score = np.mean(pred_scores)
            # 质量评分范围为0~100，分数越高说明质量越好
            print('Predicted quality score: %.2f' % score)

            end_time = time.time()
            print("运行时间：{}s".format(round(end_time - start_time, 2)))
            self.predicting_view_2.setText("预测完成！")
            self.runtime_view.setText("此次预测共花费{}s!".format(round(end_time - start_time, 2)))
            self.pre_Score.setText("左侧图片的预测分数为：%.2f !" % score)

    def exit(self):
        print("程序运行结束！")
        self.close()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = main_window()
    ui.show()
    sys.exit(app.exec())

